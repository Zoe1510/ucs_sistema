<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAgicxAIInMQCCJzEAgicxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIInMQCCJzEAgicxAIIn
        MQCCJzEAAAAAAAAAAACCJzEAgicxAIInMQCCJzEAgicxAIInMQCCJzEAgicxAIInMQCCJzEAgicxAIIn
        MQCCJzEAgicxAIInMQCCJzEAgicxAIInMQCCJzEAgicxAIInMQCCJzEAgicxAIInMQCCJzEAgicxAIIn
        MQCCJzEDgicxAIInMQCCJzEAAAAAAIInMQCCJzEDgicxFYInMQ2CJzEPgicxDoInMRGCJzEOgicxE4In
        MROCJzEYgicxFoInMRWCJzEJgicxF4InMRSCJzEagicxKIInMRKCJzEPgicxFYInMROCJzEPgicxEYIn
        MRGCJzERgicxGIInMT+CJzEZgicxBYInMQAAAAAAgicxAIInMROCJzFIgicxUIInMVKCJzFagicxXIIn
        MUqCJzFRgicxWoInMVuCJzFmgicxUYInMTSCJzE5gicxUoInMVOCJzFagicxWIInMVKCJzFZgicxV4In
        MVOCJzFWgicxRYInMTSCJzFcgicxX4InMVeCJzEdgicxAAAAAACCJzEAgicxFoInMTiCJzFEgicxOYIn
        MTCCJzE3gicxN4InMTWCJzE5gicxSIInMTGCJzFEgicxNoInMSuCJzExgicxN4InMTeCJzEygicxM4In
        MTOCJzFLgicxOYInMSuCJzEmgicxPYInMTeCJzE3gicxM4InMQ+CJzEAAAAAAJsuCQCjMQAEtTYACf//
        AAD/uwABAAD/ADIPsQAzD68AAAD/AP9qAALCOgAILw62AOFDAAXCOgAInC8IExIG5AAvDrYAKw27AC0O
        uAAtDrkAIwvIAP+KAAH/fgACKw27ABYH3QCgMAAQvTkACCYMwwAxD7IAYx5jAGMeYwAAAAAAEQXlABIG
        5BkSBuRXEwbjWRIG41kTBuJZEwbiWhMG4loTBuJZEgbjWRIG41kTBuJaEgbjWRIG41kRBeVYEwbiWhMG
        4loTBuJaEwbiWhMG4loTBuJaEwbjWRIG41kTBuJaEwbiWhEG5VgSBuRZEwbiWxMG4kUTBuIEEwbiAAAA
        AAATBuIAEwbiJhMG4oMTBuKGEwbihhIG5IQQBuiCEAbpgREG54ISBuOFEwbihhMG4oYTBuKGEwbihhMG
        4oYRBuWDEAboghAG6YEQBumBEAbpgRAG6YEQBumBEAbpgRAG6YEQBumBEAbpgRAG54ITBuOHEwbiZxMG
        4gYTBuIAAAAAABMG4gATBuIAEgbkACMGwwA/BooAfgcMFXYHHUd1Bx5YdwcbOJUHAAdBBoYAEwbhABEG
        5gAvBqoAAAX/AHkHFSN1Bx1MdQceW3UHHlx1Bx5cdQceXHUHHlx1Bx5cdQceXHUHHlx1Bx5adgcbO6kI
        AAU2BpwAAAX/ABMG4gAAAAAAEwbiAHgHGAByByUAcgckBHIHJFxyByTQcgck+XIHJP5yByTycgckr3IH
        JDByByQAcgclAHIHJAxyByR/cgck43IHJPtyByT/cgck/3IHJP9yByT/cgck/3IHJP9yByT/cgck/3IH
        JP9yByTzcgckkHIHJAtyByQAcQcnAAAAAAByByQAcgckAHIHJAFyByRxcgck9XIHJP9yByT/cgck/3IH
        JP9yByT/cgck03IHJC5yByQCcgckiXIHJP5yByT/cgck/3IHJP9yByT/cgck/3IHJP9yByT/cgck/3IH
        JP9yByT/cgck/3IHJP9yByT8cgckX3IHJAByByQAAAAAAHIHJAByByQAcgckQHIHJO1yByT/cgck/3IH
        JP9yByT/cgck/3IHJP9yByT/cgckq3IHJFdyByTzcgck/3IHJP9yByT/cgck/3IHJP9yByT/cgck/3IH
        JP9yByT/cgck/3IHJP9yByT/cgck/3IHJP9yByS0cgckB3IHJAAAAAAAcgckAHIHJARyBySncgck/3IH
        JP9yByT/cgck/3IHJP9yByT/cgck/3IHJP9yByT1cgck4XIHJP9yByT/cgck/3IHJP9yByT/cgck/3IH
        JP9yByT/cgck/3IHJP9yByT/cgck/3IHJP9yByT/cgck/3IHJNpyByQZcgckAAAAAAByByQAcgckJHIH
        JONyByT/cgck/3IHJP9yByT/cgck/3IHJP9yByT/cgck/3IHJP9yByT/cgck/3IHJP9yByT/cgck/3IH
        JP9yByT/cgck/3IHJP9yByT/cgck/3IHJP9yByT/cgck/3IHJP9yByT/cgck5HIHJCJyByQAAAAAAHIH
        JAByByRLcgck+XIHJP9yByT/cgck/3IHJPFyByTdcgck/XIHJP9yByT/cgck/3IGI/9yByT/cwon/3UN
        Kv91DSr7cgckxXIHJKFyBySfcgckoHIHJKByBySccgYjzHIGI/9yByT/cgck/3IHJP9yByTacgckGXIH
        JAAAAAAAcgckAHIHJGdyByT/cgck/3IHJP9yByT4cgckaHIHJB5yByS0cgYj/3MIJf92Diz/exg1/4Ei
        P/+FKEb/hitJ/38fPapvAh8RTgAAAHIHJACCIkAAiS9NAHcRLid9GjjBehUy/3YOK/9zCSb/cgck/3IH
        JLFyByQGcgckAAAAAABxBiMAcgYjdHEGI/9xBiP/cQYj/3EGI91yByQbdg4rAHcQLWeAHzz/iC5L/443
        Vf+QO1n/kDxa/5A8Wv+OOFb/gyRBYIUoRQBwBCEAYQAGAJZEYQB9Gjc/iS9M0o86WP+POlj/jjdV/4ox
        T/+CIkD3dQspVXcPLQByByQAAAAAAIQnRAB9Gjd3gSE+/38eO/+AHjv/fx061nUNKhaHK0gAhipHXZVE
        Yf6YSGb/mEhl/5hIZf+YSGX/mEhl/5ZEYf+HK0hijDNQAFcAAACCIj8Afhw5LI85VtmXR2T/mEhl/5hI
        Zf+YSGb/lEFe/IYqR4huAB4GdxAtAHIHJAAAAAAAoVdzAI43U3edUW7/n1Nw/59UcP+XRmPWehUxFow0
        UQCLMk5dnFBs/p9Ucf+fVHH/n1Rx/59Ucf+fVHH/n1Nw/5E9WbBrABgU////AP///wCPOFWLnlJu/59U
        cf+fVHH/n1Rx/5hIZO6GKUZ1PgAABYcqRgCoY30AcgckAAAAAACoZH8Akj5ad6Veef+nYnz/p2J9/51R
        bNZ7FzMWkTxYAI85VV2kXHf+p2J8/6dhfP+nYXz/p2F8/6dhfP+nYnz/o1x2/JdHYsaSPVicii9LjphI
        Y9GnYn3/p2F8/6dhfP+nYXz/mEdj04kuSnGLMk1vgyRAQLZ6lAByByQAAAAAALByiwCXR2F3rGuF/69v
        iP+vb4n/pFx21n0ZNRaWRF8Ak0BbXatpgv6vb4j/rm+I/65viP+ub4j/rm+I/65viP+vb4j/rm6H/65t
        hv+gVnHznlJt669wif+ub4j/rm+I/69viP+tbIX/qmiB/6lmgP+YSGOV////AHIHJAAAAAAAuH6XAJxO
        aXezd5D/tnuU/7Z7lP+pZoDWfhs3FppLZgCXR2JdsnSN/rZ7lP+2e5T/tnqT/7Z7lP+2e5T/tnuU/7Z7
        lP+2e5T/tnyV/6hjfeqhWHLgtnyV/7Z7lP+2e5T/tnuU/7Z7lP+2e5T/tXmS/6BVcJT///8AcgckAAAA
        AADAjKIAoFZvd7uEm/++iJ//vomg/7BxidZ/HTkWnlNsAJxOaF25gZj+vomf/76JoP+0eJD9snWM/b6K
        oP++iJ//voif/76In/++iaD/sHGJ355SbLK8hp3/voif/76In/++iJ//voif/76In/+8hp3/pV53lP//
        /wByByQAAAAAAMmcsACmYHd3w5On/8aYrP/Hma3/t32T14EgPBajXHQAoFdvXcGPpP/GmKz/x5mt/7mA
        luqbTGWnvYec+saYrP/GmKz/xpis/8eZrf+5gZfcjjdRWrd9k+nGl6z/xpis/8aYrP/GmKz/xpis/8WV
        qv+raYCU////AHIHJAAAAAAAw5KmAKJacXW+ip79wY6i+sGPo/2ydovSgB46FqBWbgCdUmpcvIab+sGP
        o/rBj6P8tnyR4YQnQS+cUGhytHiO2b+Ln/fBjqL6wY+j/LR5jtuAHzoemUpjXbN3jNi/i5/3wY6i+sGO
        ovrBjqL6wIyg/qdieZH///8AcgckAAAAAACSPlcAhShCI5A6VE2RPFZMkT1WTYszTUB3EC0HhCZBAIMk
        PxyPOVNMkTxWTJE9Vk2NNU9FfBg0Cv///wB7FjIdjTZQQpE8VkyRPVZNjDROQ3sWMgj27PoAexczHY43
        UEORPFZMkTxWTJE8VkyRO1VNhytGLMaWqQByByQAAAAAAJdHXwCILUcAlUNcAJZFXgCWRV4AkDpTAHgS
        LgCHK0YAhilEAJRBWgCWRV4AlkVeAJE8VgB+GzcAXgADAH8dOACQOlQAlkVeAJZFXgCQO1UAexczAFYA
        AAB/HTkAkDtUAJZFXgCWRV4AlkVeAJZEXQCKMUsA066/AHIHJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//8PwYAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAA
        AACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAA
        AACAAAAA//////////////////////////8=
</value>
  </data>
</root>